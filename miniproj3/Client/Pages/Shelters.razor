@page "/"
@using miniproj3.Shared
@inject HttpClient Http


<!--
@if (shelters == null)
{
    <p><em>Summoning the dark lord</em></p>
}
-->
<div class="row">
    <div class="col-lg-6">
        <h3>Book her!</h3>
   
        <select id="shelter" multiple>
            @foreach (var Shelter in shelters)
            {
                <option value="@Shelter.Id">@Shelter.Type</option>
            }
        </select>
        <!--
        <label>
            Select a shelter
            <select @onchange="SelectedCarsChanged" mulitiple>
                <option value="Audi">Audi</option>
                <option value="Skoda">Skoda</option>
                <option value="Ford">Ford</option>
                <option value="Peugeot">Peugeot</option>
            </select>
        </label>
        -->
        <br /><p></p>
        <label> Indtast Navn </label>
            <input placeholder="Enter Name" @bind="Booking.Name" />
        <br /><p></p>
        <label> Indtast E-Mail </label>  
            <input @bind-value="Booking.Email" placeholder="Enter Email" />
        <br /><p></p>
        <label> Indtast Kommentar</label>
            <input @bind-value="Booking.Note" placeholder="Kommentar" />
        <br /><p></p>
        <input @bind-value="Booking.Tlf" placeholder="tlf" />
        <br /><p></p>
        <input @bind-value="Booking.By" placeholder="By" />
        <br /><p></p>
        <input @bind-value="Booking.Adresse" placeholder="Adresse" />
        <br /><p></p>
        <input @bind-value="Booking.PostNr" placeholder="Post nummer" />
        <br /><p></p>
        <input @bind-value="Booking.AntalPersoner" placeholder="Antal personer" />
        <br /><p></p>
        <input @bind-value="Booking.Afrejse" placeholder="Enter Afrejse" />
        <br /><p></p>
        <input @bind-value="Booking.Ankomst" placeholder="Enter Ankomst" />
        <br /><p></p>
        <!--
    <select name="shelters">
        @foreach (var shelter in shelters)
        {
            <option value="@shelter.Id">shelter.Id</option>
        }
    </select>
        -->
        <button class="btn btn-primary btn-block" @onclick="SubmitShelter"> Submit</button>
        <br /><p></p>
    </div>
</div>
<!--
        @if (shelters == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {

            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Type</th>
                        <th>
                            Edit
                        </th>
                        <th>
                            Delete
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var shelter in shelters)
                    {
                        <tr>
                            <td>@shelter.Id</td>
                            <td>@shelter.Name</td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="@(()=>GetShelter(@shelter.Id))">Edit</button>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="@(()=>DeleteShelter(@shelter.Id))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        }
    -->
@code {
        /*
        private ShelterTest[] shelters;
    */
    List<ShelterTest> shelters = new List<ShelterTest>();

    protected override async Task OnInitializedAsync()
    {
        shelters = await Http.GetFromJsonAsync<List<ShelterTest>>("ShelterSeb");
    }
    /**
    public string[] SelectedCars { get; set; } = new string[] { };

    void SelectedCarsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedCars = (string[])e.Value;
        }
    }
    **/
    private bool edit = false;
    private Booking Booking = new Booking();
    /*
    protected override async Task OnInitializedAsync()
    {
        shelters = await Http.GetFromJsonAsync<ShelterTest[]>("api/front/shelters");
    }
    */

    private async Task DeleteShelter(string id)
    {
        await Http.DeleteAsync("api/shelter" + id);
        await OnInitializedAsync();
    }
    private async Task GetShelter(string id)
    {
        Booking = await Http.GetFromJsonAsync<Booking>("api/shelter" + id);
        edit = true;
    }
    private async Task SubmitShelter()
    {
        if (edit == false)
        {
            await Http.PostAsJsonAsync<Booking>("api/shelter", Booking);
            await OnInitializedAsync();
            Booking = new Booking();

        }
        else
        {
            await Http.PutAsJsonAsync<Booking>("api/shelter" + Booking.Id, Booking);
            Booking = new Booking();
            edit = false;
            await OnInitializedAsync();
        }
    }

}
